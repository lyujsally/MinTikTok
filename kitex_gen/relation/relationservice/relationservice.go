// Code generated by Kitex v0.7.0. DO NOT EDIT.

package relationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	relation "github.com/lyujsally/MinTikTok-lyujsally/kitex_gen/relation"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"IsFollow":         kitex.NewMethodInfo(isFollowHandler, newIsFollowArgs, newIsFollowResult, false),
		"GetFolloweeCount": kitex.NewMethodInfo(getFolloweeCountHandler, newGetFolloweeCountArgs, newGetFolloweeCountResult, false),
		"GetFollowerCount": kitex.NewMethodInfo(getFollowerCountHandler, newGetFollowerCountArgs, newGetFollowerCountResult, false),
		"GetFriendsList":   kitex.NewMethodInfo(getFriendsListHandler, newGetFriendsListArgs, newGetFriendsListResult, false),
		"Action":           kitex.NewMethodInfo(actionHandler, newActionArgs, newActionResult, false),
		"GetFolloweeList":  kitex.NewMethodInfo(getFolloweeListHandler, newGetFolloweeListArgs, newGetFolloweeListResult, false),
		"GetFollowerList":  kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
		"GetFriendList":    kitex.NewMethodInfo(getFriendListHandler, newGetFriendListArgs, newGetFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "relation",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func isFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationIsfollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).IsFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFollowArgs:
		success, err := handler.(relation.RelationService).IsFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFollowResult)
		realResult.Success = success
	}
	return nil
}
func newIsFollowArgs() interface{} {
	return &IsFollowArgs{}
}

func newIsFollowResult() interface{} {
	return &IsFollowResult{}
}

type IsFollowArgs struct {
	Req *relation.DouyinRelationIsfollowRequest
}

func (p *IsFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationIsfollowRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IsFollowArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationIsfollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFollowArgs_Req_DEFAULT *relation.DouyinRelationIsfollowRequest

func (p *IsFollowArgs) GetReq() *relation.DouyinRelationIsfollowRequest {
	if !p.IsSetReq() {
		return IsFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsFollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsFollowResult struct {
	Success *relation.DouyinRelationIsfollowResponse
}

var IsFollowResult_Success_DEFAULT *relation.DouyinRelationIsfollowResponse

func (p *IsFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationIsfollowResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IsFollowResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationIsfollowResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFollowResult) GetSuccess() *relation.DouyinRelationIsfollowResponse {
	if !p.IsSetSuccess() {
		return IsFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationIsfollowResponse)
}

func (p *IsFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsFollowResult) GetResult() interface{} {
	return p.Success
}

func getFolloweeCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFolloweeCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFolloweeCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFolloweeCountArgs:
		success, err := handler.(relation.RelationService).GetFolloweeCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFolloweeCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetFolloweeCountArgs() interface{} {
	return &GetFolloweeCountArgs{}
}

func newGetFolloweeCountResult() interface{} {
	return &GetFolloweeCountResult{}
}

type GetFolloweeCountArgs struct {
	Req *relation.DouyinRelationFolloweeCountRequest
}

func (p *GetFolloweeCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFolloweeCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFolloweeCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFolloweeCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFolloweeCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFolloweeCountArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFolloweeCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFolloweeCountArgs_Req_DEFAULT *relation.DouyinRelationFolloweeCountRequest

func (p *GetFolloweeCountArgs) GetReq() *relation.DouyinRelationFolloweeCountRequest {
	if !p.IsSetReq() {
		return GetFolloweeCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFolloweeCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFolloweeCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFolloweeCountResult struct {
	Success *relation.DouyinRelationFolloweeCountResponse
}

var GetFolloweeCountResult_Success_DEFAULT *relation.DouyinRelationFolloweeCountResponse

func (p *GetFolloweeCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFolloweeCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFolloweeCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFolloweeCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFolloweeCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFolloweeCountResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFolloweeCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFolloweeCountResult) GetSuccess() *relation.DouyinRelationFolloweeCountResponse {
	if !p.IsSetSuccess() {
		return GetFolloweeCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFolloweeCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFolloweeCountResponse)
}

func (p *GetFolloweeCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFolloweeCountResult) GetResult() interface{} {
	return p.Success
}

func getFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowerCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowerCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerCountArgs:
		success, err := handler.(relation.RelationService).GetFollowerCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerCountArgs() interface{} {
	return &GetFollowerCountArgs{}
}

func newGetFollowerCountResult() interface{} {
	return &GetFollowerCountResult{}
}

type GetFollowerCountArgs struct {
	Req *relation.DouyinRelationFollowerCountRequest
}

func (p *GetFollowerCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowerCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerCountArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowerCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerCountArgs_Req_DEFAULT *relation.DouyinRelationFollowerCountRequest

func (p *GetFollowerCountArgs) GetReq() *relation.DouyinRelationFollowerCountRequest {
	if !p.IsSetReq() {
		return GetFollowerCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowerCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowerCountResult struct {
	Success *relation.DouyinRelationFollowerCountResponse
}

var GetFollowerCountResult_Success_DEFAULT *relation.DouyinRelationFollowerCountResponse

func (p *GetFollowerCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowerCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerCountResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowerCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerCountResult) GetSuccess() *relation.DouyinRelationFollowerCountResponse {
	if !p.IsSetSuccess() {
		return GetFollowerCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowerCountResponse)
}

func (p *GetFollowerCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowerCountResult) GetResult() interface{} {
	return p.Success
}

func getFriendsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationGetFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFriendsList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendsListArgs:
		success, err := handler.(relation.RelationService).GetFriendsList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendsListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendsListArgs() interface{} {
	return &GetFriendsListArgs{}
}

func newGetFriendsListResult() interface{} {
	return &GetFriendsListResult{}
}

type GetFriendsListArgs struct {
	Req *relation.DouyinRelationGetFriendListRequest
}

func (p *GetFriendsListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationGetFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendsListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendsListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendsListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendsListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationGetFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendsListArgs_Req_DEFAULT *relation.DouyinRelationGetFriendListRequest

func (p *GetFriendsListArgs) GetReq() *relation.DouyinRelationGetFriendListRequest {
	if !p.IsSetReq() {
		return GetFriendsListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFriendsListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFriendsListResult struct {
	Success *relation.DouyinRelationGetFriendListResponse
}

var GetFriendsListResult_Success_DEFAULT *relation.DouyinRelationGetFriendListResponse

func (p *GetFriendsListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationGetFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendsListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendsListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendsListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendsListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationGetFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendsListResult) GetSuccess() *relation.DouyinRelationGetFriendListResponse {
	if !p.IsSetSuccess() {
		return GetFriendsListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendsListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationGetFriendListResponse)
}

func (p *GetFriendsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFriendsListResult) GetResult() interface{} {
	return p.Success
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).Action(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ActionArgs:
		success, err := handler.(relation.RelationService).Action(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ActionResult)
		realResult.Success = success
	}
	return nil
}
func newActionArgs() interface{} {
	return &ActionArgs{}
}

func newActionResult() interface{} {
	return &ActionResult{}
}

type ActionArgs struct {
	Req *relation.DouyinRelationActionRequest
}

func (p *ActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ActionArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ActionArgs_Req_DEFAULT *relation.DouyinRelationActionRequest

func (p *ActionArgs) GetReq() *relation.DouyinRelationActionRequest {
	if !p.IsSetReq() {
		return ActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ActionResult struct {
	Success *relation.DouyinRelationActionResponse
}

var ActionResult_Success_DEFAULT *relation.DouyinRelationActionResponse

func (p *ActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ActionResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ActionResult) GetSuccess() *relation.DouyinRelationActionResponse {
	if !p.IsSetSuccess() {
		return ActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationActionResponse)
}

func (p *ActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActionResult) GetResult() interface{} {
	return p.Success
}

func getFolloweeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFolloweeList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFolloweeListArgs:
		success, err := handler.(relation.RelationService).GetFolloweeList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFolloweeListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFolloweeListArgs() interface{} {
	return &GetFolloweeListArgs{}
}

func newGetFolloweeListResult() interface{} {
	return &GetFolloweeListResult{}
}

type GetFolloweeListArgs struct {
	Req *relation.DouyinRelationFollowListRequest
}

func (p *GetFolloweeListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFolloweeListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFolloweeListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFolloweeListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFolloweeListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFolloweeListArgs_Req_DEFAULT *relation.DouyinRelationFollowListRequest

func (p *GetFolloweeListArgs) GetReq() *relation.DouyinRelationFollowListRequest {
	if !p.IsSetReq() {
		return GetFolloweeListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFolloweeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFolloweeListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFolloweeListResult struct {
	Success *relation.DouyinRelationFollowListResponse
}

var GetFolloweeListResult_Success_DEFAULT *relation.DouyinRelationFollowListResponse

func (p *GetFolloweeListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFolloweeListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFolloweeListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFolloweeListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFolloweeListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFolloweeListResult) GetSuccess() *relation.DouyinRelationFollowListResponse {
	if !p.IsSetSuccess() {
		return GetFolloweeListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFolloweeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowListResponse)
}

func (p *GetFolloweeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFolloweeListResult) GetResult() interface{} {
	return p.Success
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(relation.RelationService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *relation.DouyinRelationFollowerListRequest
}

func (p *GetFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *relation.DouyinRelationFollowerListRequest

func (p *GetFollowerListArgs) GetReq() *relation.DouyinRelationFollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowerListResult struct {
	Success *relation.DouyinRelationFollowerListResponse
}

var GetFollowerListResult_Success_DEFAULT *relation.DouyinRelationFollowerListResponse

func (p *GetFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *relation.DouyinRelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFollowerListResponse)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowerListResult) GetResult() interface{} {
	return p.Success
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.DouyinRelationFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendListArgs:
		success, err := handler.(relation.RelationService).GetFriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendListArgs() interface{} {
	return &GetFriendListArgs{}
}

func newGetFriendListResult() interface{} {
	return &GetFriendListResult{}
}

type GetFriendListArgs struct {
	Req *relation.DouyinRelationFriendListRequest
}

func (p *GetFriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.DouyinRelationFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendListArgs_Req_DEFAULT *relation.DouyinRelationFriendListRequest

func (p *GetFriendListArgs) GetReq() *relation.DouyinRelationFriendListRequest {
	if !p.IsSetReq() {
		return GetFriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFriendListResult struct {
	Success *relation.DouyinRelationFriendListResponse
}

var GetFriendListResult_Success_DEFAULT *relation.DouyinRelationFriendListResponse

func (p *GetFriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.DouyinRelationFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(relation.DouyinRelationFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendListResult) GetSuccess() *relation.DouyinRelationFriendListResponse {
	if !p.IsSetSuccess() {
		return GetFriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.DouyinRelationFriendListResponse)
}

func (p *GetFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFriendListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) IsFollow(ctx context.Context, Req *relation.DouyinRelationIsfollowRequest) (r *relation.DouyinRelationIsfollowResponse, err error) {
	var _args IsFollowArgs
	_args.Req = Req
	var _result IsFollowResult
	if err = p.c.Call(ctx, "IsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFolloweeCount(ctx context.Context, Req *relation.DouyinRelationFolloweeCountRequest) (r *relation.DouyinRelationFolloweeCountResponse, err error) {
	var _args GetFolloweeCountArgs
	_args.Req = Req
	var _result GetFolloweeCountResult
	if err = p.c.Call(ctx, "GetFolloweeCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerCount(ctx context.Context, Req *relation.DouyinRelationFollowerCountRequest) (r *relation.DouyinRelationFollowerCountResponse, err error) {
	var _args GetFollowerCountArgs
	_args.Req = Req
	var _result GetFollowerCountResult
	if err = p.c.Call(ctx, "GetFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendsList(ctx context.Context, Req *relation.DouyinRelationGetFriendListRequest) (r *relation.DouyinRelationGetFriendListResponse, err error) {
	var _args GetFriendsListArgs
	_args.Req = Req
	var _result GetFriendsListResult
	if err = p.c.Call(ctx, "GetFriendsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Action(ctx context.Context, Req *relation.DouyinRelationActionRequest) (r *relation.DouyinRelationActionResponse, err error) {
	var _args ActionArgs
	_args.Req = Req
	var _result ActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFolloweeList(ctx context.Context, Req *relation.DouyinRelationFollowListRequest) (r *relation.DouyinRelationFollowListResponse, err error) {
	var _args GetFolloweeListArgs
	_args.Req = Req
	var _result GetFolloweeListResult
	if err = p.c.Call(ctx, "GetFolloweeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *relation.DouyinRelationFollowerListRequest) (r *relation.DouyinRelationFollowerListResponse, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, Req *relation.DouyinRelationFriendListRequest) (r *relation.DouyinRelationFriendListResponse, err error) {
	var _args GetFriendListArgs
	_args.Req = Req
	var _result GetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
